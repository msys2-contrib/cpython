name: Build
on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        msystem: ['MINGW64','MINGW32','UCRT64','CLANG64']
        include:
          - msystem: MINGW64
            prefix: mingw-w64-x86_64
          - msystem: MINGW32
            prefix: mingw-w64-i686
          - msystem: UCRT64
            prefix: mingw-w64-ucrt-x86_64
          - msystem: CLANG64
            prefix: mingw-w64-clang-x86_64
          #- msystem: CLANG32
          #  prefix: mingw-w64-clang-i686
    steps:
      - name: Setup git
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          release: false
          install: >-
            make
            binutils
            autoconf-archive
            ${{ matrix.prefix }}-toolchain
            ${{ matrix.prefix }}-expat
            ${{ matrix.prefix }}-bzip2
            ${{ matrix.prefix }}-libffi
            ${{ matrix.prefix }}-mpdecimal
            ${{ matrix.prefix }}-ncurses
            ${{ matrix.prefix }}-openssl
            ${{ matrix.prefix }}-sqlite3
            ${{ matrix.prefix }}-tcl
            ${{ matrix.prefix }}-tk
            ${{ matrix.prefix }}-zlib
            ${{ matrix.prefix }}-xz

      - name: Build Python
        shell: msys2 {0}
        run: |
          set -ex

          CFLAGS="-O2"
          
          PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
          if [ ${{ matrix.msystem }} == "CLANG64" ]
          then
            export CC=clang
            export CXX=clang++
          fi
          autoreconf -vfi
          CFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -D_WIN32_WINNT=0x0601"
          CXXFLAGS+=" -fwrapv -D__USE_MINGW_ANSI_STDIO=1 -D_WIN32_WINNT=0x0601"
          CPPFLAGS+=" -I${PREFIX_WIN}/include/ncurses "
          CFLAGS+=" -DNDEBUG "
          CXXFLAGS+=" -DNDEBUG "
          _extra_config+=("--enable-optimizations")

          # Workaround for conftest error on 64-bit builds
          export ac_cv_working_tzset=no

          # Workaround for when dlfcn exists on Windows, which causes
          # some conftests to succeed when they shouldn't (we don't use dlfcn).
          export ac_cv_header_dlfcn_h=no
          export ac_cv_lib_dl_dlopen=no
          export ac_cv_have_decl_RTLD_GLOBAL=no
          export ac_cv_have_decl_RTLD_LAZY=no
          export ac_cv_have_decl_RTLD_LOCAL=no
          export ac_cv_have_decl_RTLD_NOW=no
          export ac_cv_have_decl_RTLD_DEEPBIND=no
          export ac_cv_have_decl_RTLD_MEMBER=no
          export ac_cv_have_decl_RTLD_NODELETE=no
          export ac_cv_have_decl_RTLD_NOLOAD=no
          
          export CFLAGS
          export CXXFLAGS
          export CPPFLAGS
          
          
          MSYSTEM=MINGW ./configure \
            --prefix=${MINGW_PREFIX} \
            --host=${MINGW_CHOST} \
            --build=${MINGW_CHOST} \
            --enable-shared \
            --with-nt-threads \
            --with-system-expat \
            --with-system-ffi \
            --with-system-libmpdec \
            --without-ensurepip \
            --without-c-locale-coercion \
            --enable-loadable-sqlite-extensions \
            "${_extra_config[@]}" \
            OPT=""
          # We patch importlib which is embedded in C headers, so regenerate them
          make regen-importlib

          make -j8
          
          # Add missing venvlauncher files (issue #7014)
          # FIXME: build these from PC/launcher.c instead
          cp python.exe venvlauncher.exe
          cp pythonw.exe venvwlauncher.exe

      - name: Install
        shell: msys2 {0}
        run: |
          set -ex

          _pybasever=$(./python.exe -c "import sys; print(sys.winver);")
          srcdir=.

          # now install things

          pkgdir=python_pkgdir

          PREFIX_WIN=$(cygpath -wm ${MINGW_PREFIX})
          MSYSTEM=MINGW \
          MSYS2_ARG_CONV_EXCL="--prefix=;--install-scripts=;--install-platlib=" \
          make -j1 install DESTDIR="${pkgdir}"

          # gdb pretty printers for debugging Python itself; to use:
          # python
          # sys.path.append('C:/msys64/mingw64/share/gdb/python3')
          # import python_gdb
          # reload(python_gdb)
          # end

          cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}/libpython${_pybasever}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}.dll.a

          # Need for building boost python module
          cp -f "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}/libpython${_pybasever}.dll.a "${pkgdir}${MINGW_PREFIX}"/lib/libpython${_pybasever}.dll.a

          for fscripts in 2to3 2to3-${_pybasever} idle3 idle${_pybasever} pydoc3 pydoc${_pybasever}; do
              sed -i "s|$(cygpath -w ${MINGW_PREFIX} | sed 's|\\|\\\\|g')/bin/python${_pybasever}.exe|/usr/bin/env python${_pybasever}.exe|g" "${pkgdir}${MINGW_PREFIX}"/bin/${fscripts}
          done


          cp "${pkgdir}${MINGW_PREFIX}"/bin/python3.exe "${pkgdir}${MINGW_PREFIX}"/bin/python.exe
          cp "${pkgdir}${MINGW_PREFIX}"/bin/python3w.exe "${pkgdir}${MINGW_PREFIX}"/bin/pythonw.exe
          cp "${pkgdir}${MINGW_PREFIX}"/bin/python3-config "${pkgdir}${MINGW_PREFIX}"/bin/python-config
          cp "${pkgdir}${MINGW_PREFIX}"/bin/idle3 "${pkgdir}${MINGW_PREFIX}"/bin/idle
          cp "${pkgdir}${MINGW_PREFIX}"/bin/pydoc3 "${pkgdir}${MINGW_PREFIX}"/bin/pydoc

          sed -i "s|#!${pkgdir}${MINGW_PREFIX}/bin/python${_pybasever}.exe|#!/usr/bin/env python${_pybasever}.exe|" "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/config-${_pybasever}/python-config.py

          # fix permissons
          find ${pkgdir}${MINGW_PREFIX} -type f \( -name "*.dll" -o -name "*.exe" \) | xargs chmod 0755

          # replace paths in sysconfig
          sed -i "s|${pkgdir}${MINGW_PREFIX}|${MINGW_PREFIX}|g" \
          "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/lib-dynload/_sysconfigdata*.py \
          "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/smtpd.py

          # install venv launchers
          mkdir -p "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/venv/scripts/nt
          cp venvlauncher.exe "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/venv/scripts/nt/python.exe
          cp venvwlauncher.exe "${pkgdir}${MINGW_PREFIX}"/lib/python${_pybasever}/venv/scripts/nt/pythonw.exe

      - name: Run Smoke Test
        shell: msys2 {0}
        run: |
          SMOKETESTS="$(pwd)/.github/workflows/smoketests.py"
          cd python_pkgdir/${MINGW_PREFIX}/bin
          ./python.exe "$SMOKETESTS"
          MSYSTEM= ./python.exe "$SMOKETESTS"

      - name: Run tests
        continue-on-error: true
        shell: msys2 {0}
        run: |
          cd python_pkgdir/${MINGW_PREFIX}/bin
          ./python.exe -m test -j4

      - name: Compress
        if: always()
        shell: msys2 {0}
        run: |
          tar -I 'zstd --ultra -20' -cf python.tar.zst python_pkgdir/

      - name: Upload
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: build-${{ matrix.msystem }}
          path: python.tar.zst

